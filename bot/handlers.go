package bot

import (
	"context"
	"fmt"
	"strings"
	"time"
	"log"
	"strconv"
	"sort"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/kanef1/event-reminder-bot/model"
	"github.com/kanef1/event-reminder-bot/reminder"
	"github.com/kanef1/event-reminder-bot/storage"
)

func DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–∞–Ω–¥",
	})
}

func StartHandler(ctx context.Context, b *bot.Bot, update *models.Update){
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n" +
		"–°–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π:\n" +
		"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: /add 2025-08-08 21:05 <–¢–µ–∫—Å—Ç>\n" +
		"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π: /list \n" +
        "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: /delete id\n"+
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help",
	})
}

func HelpHandler(ctx context.Context, b *bot.Bot, update *models.Update){
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–°–ø–∏—Å–æ–∫ —É–º–µ–Ω–∏–π:\n" +
		"–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: /add 2025-08-08 21:05 <–¢–µ–∫—Å—Ç>\n" +
		"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π: /list\n"+
        "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: /delete id\n"+
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help",
	})
}

func AddHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	args := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/add"))
	parts := strings.SplitN(args, " ", 3)

	if len(parts) < 3 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùó –§–æ—Ä–º–∞—Ç: /add 2025-08-06 15:00 –¢–µ–∫—Å—Ç",
		})
		return
	}

	datePart := parts[0]
	timePart := parts[1]
	text := parts[2]


	loc, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:", err)
		loc = time.Local
	}

	dt, err := time.ParseInLocation("2006-01-02 15:04", datePart+" "+timePart, loc)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: 2025-08-06 15:00",
		})
		return
	}


	if dt.Before(time.Now()){
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "‚ùó –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (—Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º)",
		})
		return
	}

    events, err := storage.LoadEvents()
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π",
        })
        return
    }

     event := model.Event{
        OriginalID: int(time.Now().UnixNano()),
        ChatID:     update.Message.Chat.ID,
        Text:       text,
        DateTime:   dt,
    }

    events = append(events, event)
    
    events = storage.ReindexEvents(events)

    if err := storage.SaveEvents(events); err != nil {
        log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: %v", err)
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
        })
        return
    }

    reminder.ScheduleReminder(ctx, b, update.Message.Chat.ID, event)
    
    b.SendMessage(ctx, &bot.SendMessageParams{
        ChatID: update.Message.Chat.ID,
        Text:   "‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
    })
}

func DeleteHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
    args := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/delete"))
    if args == "" {
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùó –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete 123",
        })
        return
    }

    id, err := strconv.Atoi(args)
    if err != nil {
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º",
        })
        return
    }

    events, err := storage.LoadEvents()
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π",
        })
        return
    }

	for _, e := range events {
        if e.ID == id {
            storage.CancelReminder(e.OriginalID)
            break
        }
    }

    newEvents := make([]model.Event, 0)
    deleted := false
    for _, e := range events {
        if e.ID != id {
            newEvents = append(newEvents, e)
        } else {
            deleted = true
        }
    }

    if !deleted {
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "üîç –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        })
        return
    }

    if err := storage.SaveEvents(storage.ReindexEvents(newEvents)); err != nil {
        log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: %v", err)
        b.SendMessage(ctx, &bot.SendMessageParams{
            ChatID: update.Message.Chat.ID,
            Text:   "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
        })
        return
    }

    b.SendMessage(ctx, &bot.SendMessageParams{
        ChatID: update.Message.Chat.ID,
        Text:   "‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
    })
}

func ListHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	events, err := storage.LoadEvents()
    if err != nil {
    log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
    b.SendMessage(ctx, &bot.SendMessageParams{
        ChatID: update.Message.Chat.ID,
        Text:   "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π",
    })
    return
}
	sort.Slice(events, func(i, j int) bool {
        return events[i].DateTime.Before(events[j].DateTime)
    })

	if len(events) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "üîç –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π",
		})
		return
	}

	var msg strings.Builder
    msg.WriteString("üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö):\n\n")
    for i, e := range events {
        msg.WriteString(fmt.Sprintf(
            "%d. %s ‚Äî %s\n",
            i+1,
            e.Text,
            e.DateTime.Format("2006-01-02 15:04"),
        ))
    }

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   msg.String(),
	})
}


